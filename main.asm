PROCESSOR 16F876
#INCLUDE <P16F876A.inc>
OPTIONR EQU 81H
; --- STATUS BITS -----
IR EQU 7
RP1 EQU 6
RP0 EQU 5
NOT_TO EQU 4
NOT_PD EQU 3
ZF EQU 2
DC EQU 1
CF EQU 0
; -- OPTION BITS -----
W EQU B'0'
F EQU .1

; -- GPR --
GP_STATUS EQU 24H
; for global control
SWT_STATUS EQU 25H
; for control mode
SWT_BF EQU 26H
; for backup flags
MOD_STATUS EQU 27H
; for Modify clock flags
CLK_STATUS EQU 28H
; for control external item
SW_LAP EQU 29H
; for save current lap
W_TEMP EQU 2AH
S_TEMP EQU 2BH
INT_CNT EQU 2CH
PC_TEMP EQU 2DH
ANL_CNT EQU 2EH
BLINK_STATUS EQU 2FH

;CLOCK
D_1SEC EQU 32H
D_10SEC EQU 33H
D_1MIN EQU 34H
D_10MIN EQU 35H
D_1HR EQU 36H
D_10HR EQU 37H
D_THR EQU 38H
B_DELAY EQU 39H
BT_DELAY EQU 3AH
RET_VOL EQU 3BH

S_BUF EQU 40H
; define pointer's start - 40 ~ 5F

;DISP BUFFER
DISPBF_1 EQU 60H
DISPBF_2 EQU 61H
DISPBF_3 EQU 62H
DISPBF_4 EQU 63H

; -- GPR BIT
;0-3 : FND COMMON set
INT_SWT1 EQU 0
INT_SWT2 EQU 1
INT_SWT3 EQU 2
INT_SWT4 EQU 3
;4-7 : FND dot set
DOT_SWT1 EQU 4
DOT_SWT2 EQU 5
DOT_SWT3 EQU 6
DOT_SWT4 EQU 7

; -- SPR BIT
;0 : H/M or M/S
HM_CONV EQU 0
;1 : Button Enable Flag
BT_ENABLE EQU 1
;2 : ANALOG Input Enable Flag
ANL_ENABLE EQU 2
;3 : 
;4 : 
;5 : 
;6 : LAP existance
LAP_EXT EQU 6
;7 : LAP overflow
LAP_OV EQU 7

; -- MDR BIT
;0 : Thermometer
MODE1 EQU 0
;1 : Clock - H/M
MODE2 EQU 1
;2 : Clock - M/S
MODE3 EQU 2
;3 : Clock - Mody
MODE3 EQU 3
;4 : Buzzer control
B_ENABLE EQU 4

; -- CLK BIT
;0 : H1
HOUR10 EQU 0
;1 : H2
HOUR1 EQU 1
;2 : M1
MIN10 EQU 2
;3 : M2
MIN1 EQU 3
;4 : SEC
SEC EQU 4

; -- start
ORG 0
GOTO START_UP

; Interupt routine
ORG 4
	MOVWF W_TEMP
	SWAPF STATUS,W
	MOVWF S_TEMP

	BTFSC PIR1,6
	CALL A_INTR
	BTFSC INTCON,2 ;
	CALL DISP

	SWAPF S_TEMP,W
	MOVWF STATUS
	SWAPF W_TEMP,F
	SWAPF W_TEMP,W
	BCF INTCON,2
	RETFIE
DISP
	CALL BTD_MOD
	CALL ANL_MOD
	BCF INTCON,2
	BSF PORTA, 3 
	BSF PORTA, 2 
	BSF PORTB, 2 
	BSF PORTB, 1 
	BTFSC GP_STATUS, INT_SWT1
	GOTO DISP1
	BTFSC GP_STATUS, INT_SWT2
	GOTO DISP2
	BTFSC GP_STATUS, INT_SWT3
	GOTO DISP3
	GOTO DISP4
DISP1
	MOVF DISPBF_1,W
	CALL D_CONV
	MOVWF PORTC
	BTFSC GP_STATUS,DOT_SWT1
	BSF PORTC,3
	CALL P_CONV
	BCF PORTA,3
	BCF GP_STATUS,INT_SWT1
	BSF GP_STATUS,INT_SWT2
	RETURN
DISP2
	MOVF DISPBF_2,W
	CALL D_CONV
	MOVWF PORTC
	BTFSC GP_STATUS,DOT_SWT2
	BSF PORTC,3
	CALL P_CONV
	BCF PORTA,2
	BCF GP_STATUS,INT_SWT2
	BSF GP_STATUS,INT_SWT3
	RETURN
DISP3
	MOVF DISPBF_3,W
	CALL D_CONV
	MOVWF PORTC
	BTFSC GP_STATUS,DOT_SWT3
	BSF PORTC,3
	CALL P_CONV
	BCF PORTB,2
	BCF GP_STATUS,INT_SWT3
	BSF GP_STATUS,INT_SWT4
	RETURN
DISP4
	MOVF DISPBF_4,W
	CALL D_CONV
	MOVWF PORTC
	BTFSC GP_STATUS,DOT_SWT4
	BSF PORTC,3
	CALL P_CONV
	BCF PORTB,1
	BCF GP_STATUS,INT_SWT4
	BSF GP_STATUS,INT_SWT1
	INCF INT_CNT,F
	RETURN


;######################
; D_CONV
; BIT :
; 7 6 5 4 3 2 1 0
; A B C G . F D E
;######################
D_CONV
	ANDLW 0FH
	ADDWF PCL,F
	RETLW B'11100111' ;0
	RETLW B'01100000' ;1
	RETLW B'11010011' ;2
	RETLW B'11110010' ;3
	RETLW B'01110100' ;4
	RETLW B'10110110' ;5
	RETLW B'10110111' ;6
	RETLW B'11100000' ;7
	RETLW B'11110111' ;8
	RETLW B'11110110' ;9
	RETLW B'00010000' ;-
	RETLW B'11111111' ;Test
	RETLW B'11100101' ;C
	RETLW B'00001000' ;.
	RETLW B'00110111' ;E
	RETLW B'00010111' ;F
;######################
; P_CONV
; PORTC[4] -> PORTA[1]
; PORTC[3] -> PORTB[0]
;######################
P_CONV
	BSF 		PORTA, 1
	BTFSS 		PORTC, 4
	BCF 		PORTA, 1
	BSF 		PORTB, 0
	BTFSS 		PORTC, 3
	BCF 		PORTA, 0
	RETURN
ANL_MOD
	BTFSC SWT_STATUS,ANL_ENABLE
	RETURN
	MOVF ANL_CNT,W
	BTFSC STATUS,ZF
	GOTO ANL_GO,F
	DECF ANL_CNT,F
	RETURN
ANL_GO
	BSF SWT_STATUS,ANL_ENABLE
	BSF ADCON0,2
	RETURN
A_INTR
	MOVF ADRESH,W
	MOVWF RET_VOL
	BCF PIR1,6
	BSF GP_STATUS,AD_DONE
	MOVLW .16
	MOVWF ANL_CNT
	BCF SWT_STATUS,ANL_ENABLE
	RETURN
BTD_MOD
	MOVF BT_DELAY,W
	BTFSC STATUS,ZF
	GOTO BEEP_MOD
	DECF BT_DELAY,F
BEEP_MOD
	MOVF B_BEEP,W
	BTFSC STATUS,ZF
	GOTO L_LOOP1
	DECF B_BEEP,F
	RETURN

	;--main
START_UP
	BSF STATUS,RP0
	MOVLW B'00000000'
	MOVWF TRISA
	MOVLW B'00001111'
	MOVWF TRISB
	MOVLW B'00000000'
	MOVWF TRISC
	MOVLW B'00000010'
	MOVWF OPTIONR
	BCF STATUS,RP0
	BSF INTCON,5 ; TIMER INTERRUPT ENABLE
	BSF INTCON,7 ; GLOBAL INT. ENABLE
DEFAULT_ST
	CLRF D_1SEC
	CLRF D_10SEC
	CLRF D_1MIN
	CLRF D_10MIN
	CLRF D_1HR
	CLRF D_10HR
	CLRF D_THR
	CLRF GP_STATUS
	CLRF INT_CNT
	CLRF B_DELAY
	CLRF BT_DELAY
	MOVLW B'00000001'
	MOVWF MOD_STATUS
	BSF SWT_STATUS, HM_CONV
LOOP_START
CK_LPS
	MOVLW .122
	SUBWF INT_CNT,W
	BTFSS STATUS,ZF
	GOTO XLOOP
	GOTO CK_LOOP
CK_LOOP
	CLRF INT_CNT
	CALL BUZZ_MOD
	INCF D_1SEC
	MOVLW .10
	SUBWF D_1SEC,W
	BTFSS STATUS,ZF
	GOTO XLOOP
	CLRF D_1SEC
	INCF D_10SEC
	MOVLW .6
	SUBWF D_10SEC,W
	BTFSS STATUS,ZF
	GOTO XLOOP
	CLRF D_10SEC
	INCF D_1MIN
	MOVLW .10
	SUBWF D_1MIN,W
	BTFSS STATUS,ZF
	GOTO XLOOP
	CLRF D_1MIN
	INCF D_10MIN
	MOVLW .6
	SUBWF D_10MIN,W
	BTFSS STATUS,ZF
	GOTO XLOOP
	CLRF D_10MIN
	INCF D_1HR
	INCF D_THR
	MOVLW .10
	SUBWF D_1HR,W
	BTFSS STATUS,ZF
	GOTO CK_LOOP_2
	CLRF D_1HR
	INCF D_10HR
	GOTO XLOOP
CK_LOOP_2
	MOVLW .24
	SUBWF D_THR,W
	BTFSS STATUS,ZF
	GOTO XLOOP
	CLRF D_THR
	CLRF D_1HR
	CLRF D_10HR
	GOTO XLOOP
XLOOP

BT_LOOP
;######################
; Way to check Button-Input
; 1. Chattering delay is zero? -> if true, ignore input signal.
; 2. Button is floating? -> if false, ignore input signal. (until button is floating)
; 3. goto subroutine
;######################
	MOVF BT_DELAY,W
	BTFSS STATUS,ZF
	GOTO L_LOOP
	BTFSC SWT_STATUS,BT_ENABLE
	GOTO BT_LOOP1
BT_CHECK
	MOVF PORTB,W
	ANDLW B'00011100'
	XORLW B'00011100'
	BTFSS STATUS,ZF
	GOTO L_LOOP
	BSF SWT_STATUS,BT_ENABLE	
BT_LOOP1
	BTFSC PORTB,3
	GOTO BT_LOOP2
	BCF SWT_STATUS,BT_ENABLE
	CALL BEEP_2
	MOVLW 7FH
	MOVWF BT_DELAY
	CALL BT_1
	GOTO L_LOOP
BT_LOOP2
	BTFSC PORTB,4
	GOTO BT_LOOP3
	BCF SWT_STATUS,BT_ENABLE
	CALL BEEP_2
	MOVLW 7FH
	MOVWF BT_DELAY
	CALL BT_2
	GOTO L_LOOP
BT_LOOP3
	BTFSC PORTB,5
	GOTO L_LOOP
	BCF SWT_STATUS,BT_ENABLE
	CALL BEEP_2
	MOVLW 7FH
	MOVWF BT_DELAY
	CALL BT_3
	GOTO L_LOOP
L_LOOP
	CALL BUZZ_BEEP_MOD
	CALL BUZZ_CTR
	GOTO LOOP_START

;######################
;Button subroutine
;######################

BT_1
	RETURN
BT_2
	RETURN
BT_3
	RETURN
BT_4
	RETURN

;######################
;Buzzer is on when B_BEEL > 0 && B_BEEPALLOW == 0 && B_BEEPTEMPO == 0
;######################
BUZZ_CTR
	MOVF B_BEEP,W
	BTFSC STATUS,ZF	
	GOTO BUZZ_OFF
	BTFSC MOD_STATUS,B_BEEPALLOW
	GOTO BUZZ_OFF
	BTFSC MOD_STATUS,B_BEEPTEMPO
	GOTO BUZZ_OFF
BUZZ_ON
	BSF PORTA,4
	RETURN
BUZZ_OFF
	BCF PORTA,4
	RETURN

;######################	
; if (B_BEEP == 0)
;  B_BEEP_CNT--; B_BEEP = 122;
;  B_PRES == 1 : B_BEEP / 2;
; if (B_BEEP_CNT == 0)
;  B_BEEP_EB--; B_BEEP_CNT = 8;
; When B_BEEP_EB decrease, B_BEEPTEMPO toggle.
; When B_BEEP_CNT decrease, B_BEEPALLOW toggle.
;######################
BUZZ_BEEP_MOD
	MOVF B_BEEP
	BTFSS STATUS, ZF
	RETURN
	MOVF B_BEEP_CNT
	BTFSS STATUS,ZF
	GOTO BEEP_MAIN
BEEP_SWT2
	MOVF B_BEEP_EB
	BTFSC STATUS,ZF
	RETURN
	DECF B_BEEP_EB
	MOVLW .8
	MOVWF B_BEEP_CNT
	BCF MOD_STATUS,B_BEEPALLOW
	BTFSC MOD_STATUS,B_BEEPTEMPO
	GOTO CLEAR_BEEPTEM
	BSF MOD_STATUS,B_BEEPTEMPO
	GOTO BEEP_MAIN
CLEAR_BEEPTEM
	BCF MOD_STATUS,B_BEEPTEMPO
	GOTO BEEP_MAIN
BEEP_MAIN
	DECF B_BEEP_CNT
	BTFSC MOD_STATUS,B_PRES
	GOTO BEEP_MAIN1
	MOVLW .122
	GOTO BEEP_MAIN2
BEEP_MAIN1
	MOVLW .61
BEEP_MAIN2
	MOVWF B_BEEP
	BTFSC MOD_STATUS,B_BEEPALLOW
	GOTO CLEAR_BEEP
	BSF MOD_STATUS,B_BEEPALLOW
	RETURN
CLEAR_BEEP
	BCF MOD_STATUS,B_BEEPALLOW
	RETURN
BEEP_1 ; beep 0.5sec
	CLRF B_BEEP_CNT
	CLRF B_BEEP_EB
	MOVLW .244
	MOVWF B_BEEP
	BCF MOD_STATUS,B_BEEPALLOW
	BCF MOD_STATUS,B_BEEPTEMPO
	RETURN
BEEP_2 ; beep very short
	CLRF B_BEEP_CNT
	CLRF B_BEEP_EB
	MOVLW .15
	MOVWF B_BEEP
	BCF MOD_STATUS,B_BEEPALLOW
	BCF MOD_STATUS,B_BEEPTEMPO
	RETURN
BEEP_3 ; beep-beep-!
	CLRF B_BEEP
	CLRF B_BEEP_EB
	MOVLW .4
	MOVWF B_BEEP_CNT
	BCF MOD_STATUS,B_BEEPALLOW
	BCF MOD_STATUS,B_BEEPTEMPO
	BCF MOD_STATUS,B_PRES
	RETURN
BEEP_4 ; beep * 4
	CLRF B_BEEP
	CLRF B_BEEP_CNT
	MOVLW .8
	MOVWF B_BEEP_EB
	BSF MOD_STATUS,B_BEEPALLOW
	BSF MOD_STATUS,B_BEEPTEMPO
	BSF MOD_STATUS,B_PRES
	RETURN
END